Q1 : Objectives of Java 8 ?
Ans :1.  To simplify programming by reducing no of line of code with Lambda expressions . As with Lambda expressions less verbose code 
      can be written by reducing to write very obvious things in code which can be understood by compiler without writing . 
     2. To take the benfits of functional programming using lambda exporessions  . 
     3. To take the benefits of parallel processing i.e. all cpu cores . 

Q2: List feautures of java 8 ? 
Ans : Lambda expression , Functional interfaces , Predicates , Functions , Consumers , Producers , Default methods and static methods in interfaces , Mehtod and constructor references by :: operator , joda and stream api  . 

Q3: which language uses lambda expression very first and what others use it . ? 
Ans : LISP was the first . C, C++ , Ruby , scala ,.Net , python are using it already . Unfotunately java is recent and one 
      of the last . 
      
Q4: Benfefits of lambda ?
Ans :  1.  To enable functional programming in java . Code and behoviour can be sent as a method argument which was only possible 
           before by using anonimous inner classes only . Like ActivityOpeartionTemplate . 
       2.  Simplicity in wiring code very less line of code is required . Readable , Maintanable and consise code . 
       3.  To enable parllel processing also lambda is used . 
       4.  To use api very easily . 
       
Q5: What is a lambda expression ?
Ans : It is an anonymous function simple . Means a function not having modifiers not having any name and return type . 

Q6: Write a simplest lambda expression ? 
Ans : public void m1()
      {
      sop("vaneet");
      }
      Now as modifiers , name and return is not applicable . Hence ()->{sop("vaneet");} Hence this dows not have 
      any modifier , return and method name . 
 
Q7:  Write a lambda expression to take two int values and print some of two ? 
Ans :public void m1(int a , int b)
     {
     sop(a+b);
     }
     
     1. Now lambda is (int a , int b)-> {sop(a+b);} Hence here also modifier , return type and method name is not applicable . 
     2. Also can be written as (int a , int b) -> sop (a+b); . It contains only one line in lambda body hence curly braces are
     optional .
     3. (a, b) -> sop(a+b); More consise code .

Q8:  Write a lambda that return lenght of the string ? 
     public int m1(String s)
     {
     return s.lentgh();
     }
     Also further simplification : (String s) -> { return s.lenght();} 
     Also further simplification : (String s) -> return s.lenght();              [As body contains only one statement] 
     Also further simplification : (s) -> return Objects.isNull(s)? 0 : s.lenght();
     Also further simplification : (s)->  s.length();
     Also further simplification :  s ->  s.length();
     
Q9:  What is type reference ? 
     If the compiler can guess types automatically based on the context that is called type refrence . 
     
Q10 . What is functional interface ?
      If an interface contains only single abstract method then it is called functional interface . 
      It can be used to invoke a lambda expression . 
      For example : Runnable , Callable , Comparable etc as tey contain only one method . 
      Runnable contains only run() .
      
 Q11 : Can i take default and static mathods in an functional interface . 
       Yes any number of default and static method can be taken . But abstract method has to be only and only one . 
       
 Q12:  Is it a functional interface ?
       public interface Intref{
       
       public void m1();
       default puclic void m2();
       default puclic void m3();
       puclic static void m4();  
       
       }
 Ans : Yes , as it has only single abstract method . 
 
 Q13:  Is it a functional interface ?
       public interface Intref{
       
       public void m1();
       public void m2();
       default puclic void m2();
       default puclic void m3();
       puclic static void m4();  
       
       }
 Ans : No , as it has two abstract methods .
 
 Q14: What is @FunctionalInterface annotation ?
 Ans : @FunctionalInterface annotation is used to specify on an interface to indicate that this interface is 
       a functional interface . Means it cannot have 0 or multiple abstract methods . If anybody accedently put 
       0 or multiple abstract methods in it then it will be a comile time error saying Unexpected @FunctionalInterface
       annoattion , Multiple non overriding abstract methods . 
 
      
  Q15: Which will compile ?      
 
          @FunctionalInterface
          interface Intref{
            public void m1();
           }
           
           @FunctionalInterface
          interface Intref{
            public void m1();
            public void m2();
           }
           
           @FunctionalInterface
          interface Intref{
            
           }
       
  Ans : Only First One as second and third have two and 0 abstract methods .As @FunctionalInterface annoation has been 
        specified explicitly it means compiler will complain for the case 2 and 3 . 
        
 Q16:    Which will compile and why and why not ?
   
          @FunctionalInterface
          interface Base{
            public void m1();
            default void m2(){}
            public static void m3(){}
            public static void m4(){}
           } 

          @FunctionalInterface 
          interface Intref1 extends Base{
            public void m1();
           }
           
          @FunctionalInterface
          interface Intref2 extends Base{
         
            public void m2();
           }
           
           @FunctionalInterface
          interface Intref3 extends Base{
            
           } 
          
          interface Intref4 extends Base{
            public void m1();
           }

          interface Intref5 extends Base{
            public void m1();
            public void m2();
           }
           
           
          interface Intref6 extends Base{
            
           }
           
 Ans :  1. Base will compiler as it has only one abstract method and multiple static and default methods which are allowed.
        2. Intref1 will compile as it itself is a functional interface by annotation and m1() in Intref1 overrides Base m1()
        which means overall single abstract method is present which means it will compile . 
        3. Intref2 will not compile as it has m1() and m2() two abstract methods . 
        4. Intref3 will compile as it has only one inhenrited m1() abstract method . 
        5. Intref4, 5, 6 will compile as they don't have @FunctionalInterface annotation . Intref4 , 5 still
           have single abstract method hence they can be used to invoke a lambda . They are still functionalInetrfaces . 

Q17:  Why should be annotate functional interfaces with @FunctionalInterface annoatation ? .
Ans:  1. If in a code base suppose on mupltiple places lambda expressions have been written with a functional interface not 
      annoatated with this annotation and if some one accidently added a new abstract method in this interface then 
      after project release all other lambda ecxpressions will thow exceptions as they are being invoked by an interface 
      which has multiple abstract methods means which is not a functional interface . 
      2. Hence to avoid such issue always mark functinal inetrfaces with this annoation so that it acts as a 
      documentation for other developers to not to add new abstract mehotod in it . 
      3. If some one now will add compiler will complain . 
      
Q18:  Why funtional Interfaces should contain only one abstract method ? 
Ans : While writing lambdas expressions no anonymous inner class is created . No .class file is generated for a lambda. 
      A lambda expression is a anonymous function with no access modifier , no return type and no name . 
      When we write such expressions and compile the code the compiler checks the functional interface and verifies if this 
      lambda expression can be written for this iinterface . If a single method decalred with same signature is present in 
      interface the compiler maps this lambda as an implemetation of this fucntion . But if multiple methods with the same
      signature as lambda are present the compiler will get ambiguity for mapping this lambda to a method . Hence to avoid
      this isssue it is a restriction that FI should have only one abstract method in it . 
            
        
        
   
   
       
       
      
      
